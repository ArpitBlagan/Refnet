// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(uuid())
  name String?
  email String @unique
  password String?  
  description String?
  profileImage String?
  githubLink String?
  LinkedinLink String?
  twitterLink String?
  resumeLink  String?
  githubId String?
  accessTokem String?
  joinedAt DateTime @default(now())
  followers   Follower[] @relation("Followers")
  following   Follower[] @relation("Following")
  comments Comment[]
  posts  Post[]
  likes Like[]
  opinions Opinion[]
  notification Notification[]
  otherNotification Notification[]@relation("Actor")
  profileView Int @default(0)
}

model Follower {
  id        String  @id @default(uuid())
  follower  User    @relation("Following", fields: [followerId], references: [id])
  followerId String
  following User    @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt DateTime @default(now())
  @@unique([followerId, followingId])
}

model Post{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId],references: [id])
  caption String
  type PostType 
  closed Boolean?
  media String[] @default([])
  postedAt DateTime @default(now())
  opinions Opinion[]
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Application{
  id String @id @default(uuid())
  postId String
  userId String
  appliedAt DateTime @default(now())
  // user User @relation(fields: [userId],references: [id])
  // post Post @relation(fields: [postId],references: [id])
}

model Opinion{
  id String @id @default(uuid())
  postId String
  userId String
  user User @relation(fields: [userId],references: [id])
  post Post @relation(fields: [postId],references: [id])
  response ResponseType
  createdAt DateTime @default(now())
}


//user the one for whom the notification is triggered
//actor the one who trigger the notification
model Notification{
  id String @id @default(uuid())
  type NotificationType 
  title String
  message String
  userId String
  user User @relation(fields: [userId],references: [id])
  actor       User     @relation("Actor", fields: [actorId], references: [id])  
  actorId     String                               
  post        Post?    @relation(fields: [postId], references: [id]) 
  postId      String?                              
  isRead      Boolean  @default(false)             
  createdAt   DateTime @default(now()) 
}

model Like{
  id String @id @default(uuid())
  userId String
  postId String? 
  commentId String?
  user  User @relation(fields: [userId],references: [id])
  post Post? @relation(fields: [postId],references: [id])
  comment Comment? @relation(fields: [commentId],references: [id])
  @@unique([userId, postId])
  @@unique([userId,commentId])
}

model Comment{
  id           String @id @default(uuid())
  userId       String
  postId       String
  user         User @relation(fields: [userId],references: [id])
  post         Post @relation(fields: [postId],references: [id])
  comment      String
  parentId     String?
  parent       Comment?    @relation("ParentComment", fields: [parentId], references: [id])
  children     Comment[]   @relation("ParentComment")
  likes        Like[]
  createdAt    DateTime    @default(now())
}


model Newsletter{
  id String @id @default(uuid())
  email String
  subscribedAt DateTime
}


enum PostType{
  WORK
  REFERAL
  OTHER
}

enum NotificationType{
  LIKE
  FOLLOW
  UNFOLLOW
  COMMENT
  FEEDBACK
  APPLIED
}

enum ResponseType{
  NORMAL
  IMPRESSIVE
  EXCELLENT
}